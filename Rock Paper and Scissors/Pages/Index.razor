@page "/"
@using System.Timers
@using Rock_Paper_and_Scissors.Helpers
@implements IDisposable

<PageTitle>Rock Paper Scissors</PageTitle>
<div style="display:flex; justify-content:center;">
    <h1>Rock, Paper and Scissors</h1>
</div>

@if(!string.IsNullOrEmpty(resultMessage))
{
    <div style="display:flex; justify-content:center;">
        <h3 style="color: @resultMessageColor">@resultMessage</h3>
    </div>
}



<div style="display:flex; justify-content:center; margin-bottom: 20px">
    <img src="/Images/@opponentHand.Image" class="image" />
</div>

<div style="display:flex; justify-content:center; margin-bottom: 20px">
    @if(playAgain)
    {
        <button class="btn btn-info" @onclick="PlayAgain">Play Again</button>
    }
</div>

<div style="display:flex; justify-content:center;">
    @foreach (var hand in hands)
    {
        <img src="/Images/@hand.Image" class="image selectable-image" style="margin: 10px" @onclick="@(() => SelectHand(hand))"/>
    }
</div>





@code{
    List<Hand> hands = new List<Hand>()
    {
        new Hand{Selection = OptionRPS.Paper, LosesAgainst = OptionRPS.Scissors, WinsAgainst = OptionRPS.Rock, Image = "Paper.png" },
        new Hand{Selection = OptionRPS.Rock, LosesAgainst = OptionRPS.Paper, WinsAgainst = OptionRPS.Scissors, Image = "Rock.png" },
        new Hand{Selection = OptionRPS.Scissors, LosesAgainst = OptionRPS.Rock, WinsAgainst = OptionRPS.Paper, Image = "Scissor.png" }
    };

    Timer timer;
    Hand opponentHand;
    string resultMessage = string.Empty;
    string resultMessageColor = string.Empty;
    bool playAgain = false;

    protected override void OnInitialized()
    {
        opponentHand = hands[0];
        timer = new Timer();
        timer.Interval = 200;
        timer.Elapsed += TimerOnElapsed;
        timer.Start();
    }

    int indexOpponentHand = 0;

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        indexOpponentHand = (indexOpponentHand + 1) % hands.Count;
        opponentHand = hands[indexOpponentHand];
        StateHasChanged();
    }

    private void SelectHand(Hand hand)
    {

        timer.Stop();

        if(!playAgain)
        {   
            var result = hand.PlayAgainst(opponentHand);

            if(result == GameStatus.Victory)
            {
                resultMessage = "You Won!";
                resultMessageColor = "green";
            }
            else if(result == GameStatus.Loss)
            {
                resultMessage = "You Lost!";
                resultMessageColor = "red";
            }
            else
            {
                resultMessage = "Draw!";
                resultMessageColor = "black";
            }
                playAgain = true;
        }
    }

    private void PlayAgain()
    {
        timer.Start();
        resultMessage = string.Empty;
        playAgain = false;
    }

    public void Dispose()
    {
        if(timer != null)
        {
            timer.Dispose();
        }
    }
}